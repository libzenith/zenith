name: 'Get connection URI'
description: 'Get the connection URI from project using API'

inputs:
  api_key:
    description: 'Neon API key'
    required: true
  project_id:
    description: 'ID of the Project to create Branch in'
    required: true
  api_host:
    description: 'Neon API host'
    default: console-stage.neon.build
  branch_id:
    description: 'The branch ID. Defaults to your projects default branch_id if not specified.'
    required: false
  endpoint_id:
    description: 'The endpoint ID. Defaults to the read-write endpoint_id associated with the branch_id if not specified.'
    required: false
  database_name:
    description: 'The database name'
    default: 'neondb'
    required: false
  role_name:
    description: 'The role name'
    default: 'neondb_owner'
    required: false
  pooled:
    description: 'Use the connection pooler'
    type: boolean
    default: false
    required: false
outputs:
  uri:
    description: 'Connect URI'
    value: ${{ steps.get-uri.outputs.id }}

runs:
  using: "composite"
  steps:
    - name: Get Endpoint ID
      id: get-uri
      shell: bash -euxo pipefail {0}
      run: |
        params='?'
        if [ -n "${BRANCH_ID}" ]; then
          params="${params}branch_id=${BRANCH_ID}&"
        fi
        if [ -n "${ENDPOINT_ID}" ]; then
          params="${params}endpoint_id=${ENDPOINT_ID}&"
        fi
        params="${params}database_name=${DATABASE_NAME}&role_name=${ROLE_NAME}&"
        params="${params}pooled=${POOLED}"
        for i in {1..10}; do
         res=$(curl \
            "https://${API_HOST}/api/v2/projects/${PROJECT_ID}/connection_uri${params}" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --header "Authorization: Bearer ${API_KEY}")
        uri=$(echo $res | jq .uri)

          if [ -z "${uri}" ] || [ "${uri}" == "null" ]; then
            sleep 1
            continue
          fi

          break
        done

        if [ -z "${uri}" ] || [ "${uri}" == "null" ]; then
          echo >&2 "Failed to get uri after 10 attempts"
          exit 1
        fi

        echo "uri=${uri}" >> ${GITHUB_OUTPUT}

      env:
        API_HOST: ${{ inputs.api_host }}
        API_KEY: ${{ inputs.api_key }}
        PROJECT_ID: ${{ inputs.project_id }}
        BRANCH_ID: ${{inputs.branch_id}}
        ENDPOINT_ID: ${{inputs.endpoint_id}}
        DATABASE_NAME: ${{inputs.database_name}}
        ROLE_NAME: ${{inputs.role_name}}
        POOLED: ${{inputs.pooled}}
