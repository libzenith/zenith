name: Check neon with MacOS builds

on:
  workflow_call:
    inputs:
      pg_versions:
        description: "Array of the pg versions to build for, for example: ['v14', 'v17']"
        type: string
        default: '[]'
        required: true

env:
  RUST_BACKTRACE: 1
  COPT: '-Werror'

# TODO: move `check-*` and `files-changed` jobs to the "Caller" Workflow
# We should care about that as Github has limitations:
# - You can connect up to four levels of workflows
# - You can call a maximum of 20 unique reusable workflows from a single workflow file.
# https://docs.github.com/en/actions/sharing-automations/reusing-workflows#limitations
jobs:
  files-changed:
    name: Detect what files changed
    runs-on: ubuntu-22.04
    timeout-minutes: 3
    outputs:
      postgres_changes: ${{ steps.postgres_changes.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@6ccd57f4c5d15bdc2fef309bd9fb6cc9db2ef1c6 # v4.1.7
        with:
          submodules: true

      - name: Check for Postgres changes
        uses: dorny/paths-filter@1441771bbfdd59dcd748680ee64ebd8faab1a242  #v3
        id: postgres_changes
        with:
          token: ${{ github.token }}
          filters: .github/file-filters.yaml
          base: ${{ github.event_name != 'pull_request' && (github.event.merge_group.base_ref || github.ref_name) || '' }}
          ref: ${{ github.event_name != 'pull_request' && (github.event.merge_group.head_ref || github.ref) || ''}}

  check-macos-build:
    if: |
      inputs.pg_versions != '[]' && (
        contains(github.event.pull_request.labels.*.name, 'run-extra-build-macos')  ||
        contains(github.event.pull_request.labels.*.name, 'run-extra-build-*') ||
        github.ref_name == 'main'
      )
    timeout-minutes: 30
    runs-on: macos-15
    strategy:
      matrix:
        postgres-version: ${{ fromJSON(inputs.pg_versions) }}
    env:
      # Use release build only, to have less debug info around
      # Hence keeping target/ (and general cache size) smaller
      BUILD_TYPE: release
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4

      - name: Checkout submodule vendor/postgres-${{ matrix.postgres-version }}
        run: |
          git submodule init vendor/postgres-${{ matrix.postgres-version }}
          git submodule update --depth 1

      - name: Install build dependencies
        run: |
          echo brew install flex bison openssl protobuf icu4c

      - name: Set pg ${{ matrix.postgres-version }} for caching
        id: pg_rev
        run: echo pg_rev=$(git rev-parse HEAD:vendor/postgres-${{ matrix.postgres-version }})

      - name: Cache postgres ${{ matrix.postgres-version }} build
        id: cache_pg
        uses: actions/cache@v4
        with:
          path: pg_install/${{ matrix.postgres-version }}
          key: v1-${{ runner.os }}-${{ runner.arch }}-${{ env.BUILD_TYPE }}-pg-${{ steps.pg_rev.outputs.pg_rev }}-${{ hashFiles('Makefile') }}

      - name: Set extra env for macOS
        run: |
          echo 'LDFLAGS=-L/usr/local/opt/openssl@3/lib' >> $GITHUB_ENV
          echo 'CPPFLAGS=-I/usr/local/opt/openssl@3/include' >> $GITHUB_ENV

      - name: Cache cargo deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            !~/.cargo/registry/src
            ~/.cargo/git
            target
          key: v1-${{ runner.os }}-${{ runner.arch }}-cargo-${{ hashFiles('./Cargo.lock') }}-${{ hashFiles('./rust-toolchain.toml') }}-rust

      - name: Build Postgres ${{ matrix.postgres-version }}
        if: steps.cache_pg.outputs.cache-hit != 'true'
        run: |
          make postgres-${{ matrix.postgres-version }} -j$(sysctl -n hw.cpu)

      - name: Build Neon Pg Ext ${{ matrix.postgres-version }}
        run: |
          make "neon-pg-ext-${{ matrix.postgres-version }}" -j$(sysctl -n hw.cpu)

      - name: Build walproposer-lib (only for v17)
        if: matrix.postgres-version == 'v17'
        run:
          make walproposer-lib -j$(sysctl -n hw.cpu)

      - name: Run cargo build
        if: matrix.postgres-version == 'v17'
        run: PQ_LIB_DIR=$(pwd)/pg_install/${{ matrix.postgres-version }}/lib cargo build --all --release

      - name: Check that no warnings are produced
        if: matrix.postgres-version == 'v17'
        run: ./run_clippy.sh